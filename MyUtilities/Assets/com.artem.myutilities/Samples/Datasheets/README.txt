This text document describes the steps that will help you understand what this Datasheet utility is capable of.

Let's consider an example where you are creating a race game and you want a convenient way for your designers to add cars into the game. The designer wants to specify the following information
for each car:
- The car name
- The display name
- The price
- Availability in game

The designer then would create an excell sheet with that information, export it as a CSV file and add into the Unity project.

In this example the CSV file is already in the project, you can find it in the same folder as this README.

Make sure the following folders exist, otherwise create them:
- Assets/Resources/Datasheets
- Assets/Scripts/Datasheets
- Assets/Scripts/Editor/Datasheets

----------------------------------------------------------------------------------------------

First place the CSV file in Resources/Datasheets.

Go to Window/DSModelManager and enter the name of the CSV file which will be the name of the model. In this case enter "Cars" and press "Generate Model Classes" button.

The utility then goes ahead and creates 4 scripts:
- CarsDSModel
- CarsDSRecord
- CarsDSID
- CarsDSEditorMenu

If you are curious to see what scripts are responsible for this functionality you can check DSModelManagerWindow and DSModelScriptGenerator scripts.

After waiting for compilation go to Window/CarsDSModel/GenerateModel.
You can now find the ScriptableObject of the model in Assets/Resources/DSModels.
If you check this ScriptableObject out you will find that it contains a list of records, each element containing only 1 variable. This variable is of type 
CarsDSID(an enum class that was generated by the utility) and corresponds to the Car id from the CSV file.

----------------------------------------------------------------------------------------------

Now we need to make some manual changes to add other variables.
Open the CarsDSRecord script.
In our example we need to add 3 variables:
- display name
- price
- availability in game
Therefore input these lines at the top of the CarsDSRecord class:

	public string displayName;
	public int price;
	public bool availabilityInGame;

Now we need to make sure these variables are being parsed correctly when the model is updated.
To do this add the following lines inside the constructor:
	
	displayName = csvFileLine[1];
	price = int.Parse(csvFileLine[2]);
	availabilityInGame = bool.Parse(csvFileLine[3]);

----------------------------------------------------------------------------------------------

Now we need to update the model to see our changes.
Go to Window/CarsDSModel/UpdateModel.
If you now check the ScriptableObject of the model you will find that each record contains all the variables from the CSV file.

----------------------------------------------------------------------------------------------

Now if the designer wants to add a new car or change any information for existing cars, one simply needs to make changes in the excel sheet and import a new csv file or edit the existing csv file directly, and update the model
through Window/CarsDSModel/UpdateModel.
If programmers have already set up everything in the game to take information from this model, then the game will update by itself and the designer will see all the changes.

----------------------------------------------------------------------------------------------

When the programmer wants to make use of this data in the game, one should have a script that references this model (the CarsDSModel).
By default this model has three methods:
- GetAllRecords() - returns a list of all the records
- GetAllIDs() - returns a list of all the IDs(enums)
- GetRecordByID(ID) - return a record, which id mathces the passed parameter

Other methods can be added in the CarsDSModel script.
